{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Untitled","provenance":[],"authorship_tag":"ABX9TyPcyh/K4+mG1B00SZwIHTS/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QpPePqKT6XGg","executionInfo":{"status":"ok","timestamp":1634550069546,"user_tz":-540,"elapsed":1373,"user":{"displayName":"윤영진","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04470020603917047117"}},"outputId":"2ff7683c-2163-489a-9fe0-425b05925308"},"source":["from google.colab import drive\n","drive.mount(\"/gdrive\",force_remount=True)"],"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /gdrive\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yoo29c_QxMvU","executionInfo":{"status":"ok","timestamp":1634550404525,"user_tz":-540,"elapsed":307,"user":{"displayName":"윤영진","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04470020603917047117"}},"outputId":"db50acc6-a1ac-4662-b614-3610047385f1"},"source":["import pandas as pd\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn import tree\n","import graphviz \n","\n","file_path = \"/gdrive/MyDrive/colab/dt/PlayTennis.csv\"\n","datas = pd.read_csv(file_path)\n","\n","print(datas)\n"],"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["     outlook  temp humidity  windy  day      time play\n","0      sunny   hot     high  False  Wed  09-30-00   no\n","1      sunny   hot     high   True  Tue  00-30-20   no\n","2   overcast   hot     high  False  Sat  12-30-30  yes\n","3      rainy  mild     high  False  Sun  10-30-30  yes\n","4      rainy  cool   normal  False  Mon  09-15-30  yes\n","5      rainy  cool   normal   True  Thu  14-30-30   no\n","6   overcast  cool   normal   True  Sun  16-30-30  yes\n","7      sunny  mild     high  False  Sat  23-30-30   no\n","8      sunny  cool   normal  False  Sun  16-30-30  yes\n","9      rainy  mild   normal  False  Sat  19-30-30  yes\n","10     sunny  mild   normal   True  Fri  20-20-15  yes\n","11  overcast  mild     high   True  Tue  10-30-30  yes\n","12  overcast   hot   normal  False  Sun  18-30-30  yes\n","13     rainy  mild     high   True  Wed  03-30-30   no\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9YRw1HyNx01b","executionInfo":{"status":"ok","timestamp":1634550406826,"user_tz":-540,"elapsed":281,"user":{"displayName":"윤영진","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04470020603917047117"}},"outputId":"7af400f0-bfdb-42ea-e521-fa4a427438e6"},"source":["labelEncoder = LabelEncoder()\n","target_names = labelEncoder.fit(datas['play']).classes_\n","\n","datas['outlook'] = labelEncoder.fit_transform(datas['outlook'])\n","datas['temp'] = labelEncoder.fit_transform(datas['temp'])\n","datas['humidity'] = labelEncoder.fit_transform(datas['humidity'])\n","datas['windy'] = labelEncoder.fit_transform(datas['windy'])\n","datas['day'] = labelEncoder.fit_transform(datas['day'])\n","datas['time'] = labelEncoder.fit_transform(datas['time'])\n","datas['play'] = labelEncoder.fit_transform(datas['play'])\n","\n","print(datas)\n","\n","\n","\n"],"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["    outlook  temp  humidity  windy  day  time  play\n","0         2     1         0      0    6     3     0\n","1         2     1         0      1    5     0     0\n","2         0     1         0      0    2     5     1\n","3         1     2         0      0    3     4     1\n","4         1     0         1      0    1     2     1\n","5         1     0         1      1    4     6     0\n","6         0     0         1      1    3     7     1\n","7         2     2         0      0    2    11     0\n","8         2     0         1      0    3     7     1\n","9         1     2         1      0    2     9     1\n","10        2     2         1      1    0    10     1\n","11        0     2         0      1    5     4     1\n","12        0     1         1      0    3     8     1\n","13        1     2         0      1    6     1     0\n"]}]},{"cell_type":"code","metadata":{"id":"zkkRAu8RyT4a"},"source":["x_data,y_data = datas.drop(['play'],axis=1), datas['play']\n","\n","dt = tree.DecisionTreeClassifier(criterion='entropy')\n","train_result =dt.fit(x_data,y_data)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":319},"id":"cR_gxujzFryg","executionInfo":{"status":"error","timestamp":1634550368878,"user_tz":-540,"elapsed":328,"user":{"displayName":"윤영진","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"04470020603917047117"}},"outputId":"89631063-5789-43e0-ab0c-ae3a0dc4b57a"},"source":["graph = graphviz.Source(tree.export_graphviz(train_result, out_file=None,feature_names=x_data.columns,class_names=target_names)) \n","graph"],"execution_count":28,"outputs":[{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-d4fa6e4c97b3>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mgraph\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgraphviz\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSource\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtree\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexport_graphviz\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_result\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mout_file\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfeature_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx_data\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mclass_names\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtarget_names\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mgraph\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_export.py\u001b[0m in \u001b[0;36mexport_graphviz\u001b[0;34m(decision_tree, out_file, max_depth, feature_names, class_names, label, filled, leaves_parallel, impurity, node_ids, proportion, rotate, rounded, special_characters, precision)\u001b[0m\n\u001b[1;32m    762\u001b[0m             \u001b[0mrounded\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrounded\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mspecial_characters\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mspecial_characters\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    763\u001b[0m             precision=precision)\n\u001b[0;32m--> 764\u001b[0;31m         \u001b[0mexporter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexport\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdecision_tree\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    765\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    766\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mreturn_string\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_export.py\u001b[0m in \u001b[0;36mexport\u001b[0;34m(self, decision_tree)\u001b[0m\n\u001b[1;32m    405\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    406\u001b[0m             self.recurse(decision_tree.tree_, 0,\n\u001b[0;32m--> 407\u001b[0;31m                          criterion=decision_tree.criterion)\n\u001b[0m\u001b[1;32m    408\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    409\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtail\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_export.py\u001b[0m in \u001b[0;36mrecurse\u001b[0;34m(self, tree, node_id, criterion, parent, depth)\u001b[0m\n\u001b[1;32m    465\u001b[0m             self.out_file.write(\n\u001b[1;32m    466\u001b[0m                 '%d [label=%s' % (node_id, self.node_to_str(tree, node_id,\n\u001b[0;32m--> 467\u001b[0;31m                                                             criterion)))\n\u001b[0m\u001b[1;32m    468\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    469\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilled\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/tree/_export.py\u001b[0m in \u001b[0;36mnode_to_str\u001b[0;34m(self, tree, node_id, criterion)\u001b[0m\n\u001b[1;32m    340\u001b[0m                                           \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m                                           characters[2])\n\u001b[0;32m--> 342\u001b[0;31m             \u001b[0mnode_string\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0mclass_name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    343\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m         \u001b[0;31m# Clean up any trailing newlines\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: can only concatenate str (not \"numpy.int64\") to str"]}]}]}